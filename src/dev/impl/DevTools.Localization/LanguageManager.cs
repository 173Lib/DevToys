
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Toolkit.Mvvm.ComponentModel;
using System.ComponentModel;
using System.Globalization;
using Windows.ApplicationModel.Resources;
using Windows.Globalization;
using Windows.UI.Xaml;

namespace DevTools.Localization
{
    public partial class LanguageManager : ObservableObject
    {
        private static LanguageManager _languageManager;
		
        private readonly MainPageStrings _mainpage = new MainPageStrings();

        /// <summary>
        /// Gets an instance of <see cref="LanguageManager"/>.
        /// </summary>
        public static LanguageManager Instance => _languageManager ?? (_languageManager = new LanguageManager());

        /// <summary>
        /// Gets if the text must be written from left to right or from right to left.
        /// </summary>
        public FlowDirection FlowDirection { get; private set; }

        /// <summary>
        /// Gets the <see cref="MainPageStrings"/>.
        /// </summary>
        public MainPageStrings MainPage => _mainpage;

        /// <summary>
        /// Retrieves the current culture.
        /// </summary>
        public CultureInfo GetCurrentCulture()
        {
            return CultureInfo.CurrentUICulture;
        }

        /// <summary>
        /// Change the current culture of the application
        /// </summary>
        public void SetCurrentCulture(CultureInfo culture)
        {
            CultureInfo.DefaultThreadCurrentCulture = culture;
            CultureInfo.DefaultThreadCurrentUICulture = culture;
            ApplicationLanguages.PrimaryLanguageOverride = culture.TextInfo.CultureName;

            if (culture.TextInfo.IsRightToLeft)
            {
                FlowDirection = FlowDirection.RightToLeft;
            }
            else
            {
                FlowDirection = FlowDirection.LeftToRight;
            }

            // All the properties changed.
            OnPropertyChanged(new PropertyChangedEventArgs(string.Empty));
        }
    }

    public class MainPageStrings : ObservableObject
    {
        private readonly ResourceLoader _resources = ResourceLoader.GetForViewIndependentUse("DevTools.Localization/MainPage");

        /// <summary>
        /// Gets the resource Yes.
        /// </summary>
        public string Yes => _resources.GetString("Yes");
    }
}