@namespace DevToys.Blazor.Pages.SubPages
@using DevToys.Blazor.Components.UIElements
@inherits MefComponentBase

@if (ViewModel.ToolView.IsScrollable)
{
    <ScrollViewer Class="entrance-theme-transition tool-page-content"
                  IsScrollable="@(!IsInFullScreenMode)">
        @RenderToolWithHeader(true)
    </ScrollViewer>
}
else
{
    <div class="entrance-theme-transition tool-page-content">
        @RenderToolWithHeader(false)
    </div>
}

@code {
    private RenderFragment<bool> RenderToolWithHeader { get; set; } = default!;

    protected override Task OnInitializedAsync()
    {
        RenderToolWithHeader = (bool isScrollable) => (__builder) =>
        {
            <Grid RowSpacing="12"
                  Rows="@(new List<UIGridLength>
                    {
                        UIGridLength.Auto,
                        new UIGridLength(1, UIGridUnitType.Fraction)
                    })"
                  ColumnSpacing="6"
                  Columns="@(new List<UIGridLength>
                    {
                        new UIGridLength(1, UIGridUnitType.Fraction),
                        UIGridLength.Auto
                    })">

                <GridCell Row="0" Column="0">
                    <TextBlock Appearance="@TextBlockAppearance.Title"
                               Style="font-size: 24px !important"
                               Text="@ViewModel.HeaderText" />
                </GridCell>
                <GridCell Row="0"
                          Column="1">
                    <StackPanel Wrap="false">
                        <Button IsVisible="@ViewModel.IsSelectedMenuItemSupportFavorite"
                                Appearance="ButtonAppearance.Stealth"
                                @onclick="@OnToggleFavorite">
                            <StackPanel>
                                <FontIcon Glyph="@(ViewModel.IsSelectedMenuItemAFavoriteTool ? '\uF71A' : '\uF70F')" />
                                <TextBlock Text="@ViewModel.GetFavoriteButtonText(ViewModel.IsSelectedMenuItemAFavoriteTool)" />
                            </StackPanel>
                        </Button>
                    </StackPanel>
                </GridCell>

                <GridCell Row="1" ColumnSpan="2">
                    <FullScreenContainer IsInFullScreenModeChanged="@OnIsInFullScreenModeChanged">
                        @if (ViewModel.ToolView.RootElement is not null)
                        {
                            <UIElementPresenter UIElement="@ViewModel.ToolView.RootElement" />
                        }
                    </FullScreenContainer>
                </GridCell>
            </Grid>
        };

        return base.OnInitializedAsync();
    }
}