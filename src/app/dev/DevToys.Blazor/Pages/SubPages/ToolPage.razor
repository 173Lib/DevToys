@namespace DevToys.Blazor.Pages.SubPages
@using DevToys.Blazor.Components.UIElements
@inherits MefComponentBase

@if (ViewModel.ToolView.IsScrollable)
{
    <ScrollViewer Class="entrance-theme-transition tool-page-content"
                  IsScrollable="@(!IsInFullScreenMode)">
        @RenderToolWithHeader(true)
    </ScrollViewer>
}
else
{
    <div class="entrance-theme-transition tool-page-content">
            @RenderToolWithHeader(false)
    </div>
}

@code {
    private RenderFragment<bool> RenderToolWithHeader { get; set; } = default!;

    protected override Task OnInitializedAsync()
    {
        RenderToolWithHeader = (bool isScrollable) => (__builder) =>
        {
            <Grid RowSpacing="12"
                  Rows="@(new List<GridLength>
                {
                    GridLength.Auto,
                    new GridLength(1, GridUnitType.Fraction)
                })">

                <GridCell Row="0">
                    <TextBlock Appearance="@TextBlockAppearance.Title"
                               Style="font-size: 24px !important"
                               Text="@ViewModel.HeaderText" />
                </GridCell>

                <GridCell Row="1">
                    @*@if (isScrollable)
                    {
                        <UIElementPresenter UIElement="@ViewModel.ToolView.RootElement" />
                    }
                    else
                    {
                        <FullScreenContainer>
                            <UIElementPresenter UIElement="@ViewModel.ToolView.RootElement" />
                        </FullScreenContainer>
                    }*@
                    <FullScreenContainer IsInFullScreenModeChanged="@OnIsInFullScreenModeChanged">
                        <UIElementPresenter UIElement="@ViewModel.ToolView.RootElement" />
                    </FullScreenContainer>
                </GridCell>
            </Grid>
        };

        return base.OnInitializedAsync();
    }
}