@page "/"

@using DevToys.Blazor.Pages.SubPages
@using DevToys.Core.Tools.ViewItems;
@using DevToys.Core.Tools;
@namespace DevToys.Blazor.Pages
@inherits MefComponentBase

<!-- Provider for popover -->
<PopoverProvider />

<!-- Overlay that covers the whole window for context menus -->
<Overlay ZIndex="80000"
         Visible="ContextMenuService.IsContextMenuOpened"
         OnClick="ContextMenuService.OnCloseContextMenuRequested" />

<!-- Navigation View -->
<!-- TODO: Localize -->
<NavBar TElement="INotifyPropertyChanged"
        TSearchElement="GuiToolViewItem"
        MenuItemsSource="@ViewModel.HeaderAndBodyToolViewItems"
        FooterMenuItemsSource="@ViewModel.FooterToolViewItems"
        CanGoBack="@ViewModel.CanGoBack"
        @bind-SelectedItem="ViewModel.SelectedMenuItem"
        OnBackButtonClicked="OnBackButtonClicked"
        OnHiddenStateChanged="OnHiddenStateChanged"
        SearchBarPlaceholder="Type to search for tools..."
        SearchQueryChanged="OnSearchQueryChanged"
        SearchQuerySubmitted="OnSearchQuerySubmitted"
        SearchResultItems="ViewModel.SearchResults">
    <!-- Header -->
    <Header>
        <TextBlock Text="DevToys" />
    </Header>

    <!-- Search box's result item design -->
    <SearchResultItemTemplate Context="item">
        <div class="sidebar-searchbar-result-item">
            <div class="sidebar-searchbar-result-item-icon">
                <FontIcon FontFamily="@item.ToolInstance.IconFontName" Glyph="@item.ToolInstance.IconGlyph" />
            </div>
            <div class="sidebar-searchbar-result-item-text">
                <TextBlock NoWrap="true" Text="@item.ToolInstance.LongDisplayTitle" HighlightedSpans="@item.MatchedSpans" />
            </div>
        </div>
    </SearchResultItemTemplate>

    <!-- Item design -->
    <NavBarItemIconTemplate Context="item">
        @{
            var iconGlyph = '\0';
            var iconFontFamily = string.Empty;
            if (item is GuiToolViewItem guiToolViewItem)
            {
                iconGlyph = guiToolViewItem.ToolInstance.IconGlyph;
                iconFontFamily = guiToolViewItem.ToolInstance.IconFontName;
            }
            else if (item is GroupViewItem groupViewItem)
            {
                iconGlyph = groupViewItem.IconGlyph;
                iconFontFamily = groupViewItem.IconFontName;
            }

            <FontIcon FontFamily="@iconFontFamily" Glyph="@iconGlyph" />
        }
    </NavBarItemIconTemplate>

    <NavBarItemTitleTemplate Context="item">
        @{
            var title = string.Empty;
            if (item is GuiToolViewItem guiToolViewItem)
            {
                title = guiToolViewItem.MenuDisplayTitle;
            }
            else if (item is GroupViewItem groupViewItem)
            {
                title = groupViewItem.DisplayTitle;
            }

            <TextBlock NoWrap="true" Text="@title" />
        }
    </NavBarItemTitleTemplate>

    <!-- Content of the NavBar-->
    <Content>
        @if (!IsTransitioning)
        {
            if (ViewModel.SelectedMenuItem is GuiToolViewItem guiToolViewItem)
            {
                <ToolPage GuiToolViewItem="@guiToolViewItem"/>
            }
            else if (ViewModel.SelectedMenuItem is GroupViewItem groupToolViewItem)
            {
                <ToolGroup GroupViewItem="@groupToolViewItem" />
            }
        }
    </Content>
</NavBar>