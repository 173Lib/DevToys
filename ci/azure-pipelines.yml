# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  group: BuildPipelineVariables
  solution: '**/*.sln'
  uwpProject: '**/*.wapproj'
  testProject: '**/*test*.csproj'
  buildPlatform: 'x86|x64|ARM|ARM64'
  buildConfiguration: 'Release'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'

jobs:
- job: Build
  timeoutInMinutes: 240
  steps:

  - task: VisualStudioTestPlatformInstaller@1
    displayName: 'Install Visual Studio Test Platform'
    inputs:
      packageFeedSelector: 'nugetOrg'
      versionSelector: 'latestStable'

  - task: PowerShell@2
    displayName: 'Restore nuget packages'
    inputs:
      filePath: 'init.ps1'
      failOnStderr: true

  # # Restore nuget package for x86. This should in fact restore packages for every platform.
  # - task: MSBuild@1
  #   displayName: 'Restore x86 nuget'
  #   inputs:
  #     solution: '$(solution)'
  #     platform: 'x86'
  #     configuration: '$(buildConfiguration)'
  #     msbuildArguments: '/t:restore'

  # # Restoring nugets for every platforms sounds unnecessary but allows to create 'project.assets.json' files for 
  # # each platform, which is required in order to build in Release mode.
  # - task: MSBuild@1
  #   displayName: 'Restore x64 nuget'
  #   inputs:
  #     solution: '$(solution)'
  #     platform: 'x64'
  #     configuration: '$(buildConfiguration)'
  #     msbuildArguments: '/t:restore'

  # - task: MSBuild@1
  #   displayName: 'Restore arm nuget'
  #   inputs:
  #     solution: '$(solution)'
  #     platform: 'arm'
  #     configuration: '$(buildConfiguration)'
  #     msbuildArguments: '/t:restore'

  # - task: MSBuild@1
  #   displayName: 'Restore arm64 nuget'
  #   inputs:
  #     solution: '$(solution)'
  #     platform: 'arm64'
  #     configuration: '$(buildConfiguration)'
  #     msbuildArguments: '/t:restore'

  - task: MSBuild@1
    displayName: 'Build UWP AppxBundle'
    inputs:
      solution: '$(uwpProject)'
      configuration: '$(buildConfiguration)'
      msbuildArguments: '/t:build /p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxPackageSigningEnabled=false /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload'
      maximumCpuCount: true

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
    inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: '**\bin\$(BuildConfiguration)\**'
      TargetFolder: '$(build.artifactstagingdirectory)'

  - task: MSBuild@1
    displayName: 'Build x64 Tests'
    inputs:
      solution: '$(testProject)'
      configuration: 'Debug'
      platform: 'x64'
      msbuildArguments: '/t:build'
      maximumCpuCount: true

  - task: VSTest@2
    displayName: 'Run Tests'
    inputs:
      platform: 'x64'
      configuration: 'Debug'
      testSelector: 'testAssemblies'
      testAssemblyVer2: |
        **\*test*.dll
        **\*test*.build.appxrecipe
        !**\*TestAdapter.dll
        !**\obj\** 
      searchFolder: '$(System.DefaultWorkingDirectory)'
      resultsFolder: '$(System.DefaultWorkingDirectory)\TestResults'
      runInParallel: false
      codeCoverageEnabled: true
      rerunFailedTests: false
      runTestsInIsolation: true
      runOnlyImpactedTests: false

  # - task: CopyFiles@2
  #   displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  #   inputs:
  #     SourceFolder: '$(system.defaultworkingdirectory)'
  #     Contents: '**\bin\$(BuildConfiguration)\**'
  #     TargetFolder: '$(build.artifactstagingdirectory)'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/TEST-*.xml'
    condition: always()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
